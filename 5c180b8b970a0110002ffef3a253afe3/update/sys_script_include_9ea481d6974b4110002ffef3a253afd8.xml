<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_616811_coworking.CSRPortalEntry</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CSRPortalEntry</name>
        <script><![CDATA[var CSRPortalEntry = Class.create();

CSRPortalEntry.prototype = {
	
    initialize: function() {
		this.logVariables = false;  // for debugging 
		this.portal = "/sp/";  
    },
	
	getFirstPageURL: function() {
		var session = gs.getSession();
		this.logProperties('before', session);

		// has roles and is not a Service Portal page - go to UI16
		var nt = session.getProperty("nav_to");
		var isServicePortalURL = new GlideSPScriptable().isServicePortalURL(nt);
		var redirectURL = session.getProperty("login_redirect");
// 		|| gs.hasRole("x_616811_coworking.manager") || 
// 			gs.hasRole("x_616811_coworking.admin"))
		gs.addInfoMessage(redirectURL);
		if (gs.hasRole("admin")   && !redirectURL && !isServicePortalURL)
			return;

		// user may have logged in from a frame, the /login_redirect.do page will bust out of it
		if (!redirectURL) {
			// redirectURL is nav_to 
			// if nav_to == "welcome.do" then use starting_page
			var sPage = session.getProperty("starting_page");
			if (sPage && nt == "welcome.do")
				nt = sPage;
			
			// Avoid a redirect loop to the home page
			var ep = gs.getProperty("glide.login.home");
			if (nt) {
				if (ep == nt)
					nt = null;
			}
			// PRB726860: if page is still welcome.do, go to glide.login.home preserving frameset
			if (nt == "welcome.do") {
				session.putProperty("nav_to", ep);
				return;
			}
			
			session.putProperty("login_redirect", nt || "true");
			return "/login_redirect.do?sysparm_stack=no";
		}

		session.clearProperty("login_redirect");
		session.clearProperty("nav_to");
		var returnUrl = this.portal;
		if (redirectURL && redirectURL != "true") {
			var spUrl = new GlideSPScriptable().mapUrlToSPUrl(redirectURL);
			returnUrl = spUrl ? this.portal + "?" + spUrl : redirectURL;
		}

		this.logProperties('after', session);
		if (!this.logVariables) {
			gs.log('redirectURL: ' + redirectURL);
			gs.log('User: ' + user.getName());
			gs.log('is internal: ' + (!user.hasRoles()));
			gs.log('returnUrl: ' + returnUrl);
		}

		return returnUrl;
	},
    type: 'CSRPortalEntry'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-26 03:46:15</sys_created_on>
        <sys_id>9ea481d6974b4110002ffef3a253afd8</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>CSRPortalEntry</sys_name>
        <sys_package display_value="Coworking space Reservation System" source="x_616811_coworking">5c180b8b970a0110002ffef3a253afe3</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Coworking space Reservation System">5c180b8b970a0110002ffef3a253afe3</sys_scope>
        <sys_update_name>sys_script_include_9ea481d6974b4110002ffef3a253afd8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-04-26 04:00:22</sys_updated_on>
    </sys_script_include>
</record_update>
