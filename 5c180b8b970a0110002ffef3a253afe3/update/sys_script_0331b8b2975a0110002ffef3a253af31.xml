<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_616811_coworking_csr_reservations2</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_616811_coworking_csr_reservations2">status=awaiting_approval^EQ<item display_value="Awaiting approval" endquery="false" field="status" goto="false" newquery="false" operator="=" or="false" value="awaiting_approval"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Reservation fields validation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var util = new ReservationUtils();
	var didExcept = false;
	var datetimeExcept = false;
	
	var start;
	var end;
	if(current.duration_type == "hourly"){
		start = current.u_start_time;
		end = current.u_end_time;
	} else {
		start = current.u_start_date;
		end = current.u_end_date;
	}
	if(util.dateIsPastCurrentTime(start,end)){
		gs.addErrorMessage("Start and End must be ahead the current time");
		didExcept = true;
		datetimeExcept = true;
	}
	if(util.endIsBeforeStart(start,end)){
		gs.addErrorMessage("End must be ahead of Start");
		didExcept = true;
		datetimeExcept = true;
	}
	
	if(current.duration_type == "hourly" && util.intervalIsNotEqualToHour(start,end)){
		gs.addErrorMessage("Schedule must be exact an hour");
		didExcept = true;
		datetimeExcept = true;
	}
	
	if( current.duration_type == "hourly" && util.dateIsNotOnTheSameDay(start,end)){
		gs.addErrorMessage("Hourly reservations require Start and End datetime to be on the same day");
		didExcept = true;
		datetimeExcept = true;
	}
	
	
	var spaceDays = util.dateIsNotWithinSpaceDays(start,end, current.space);
	if(!datetimeExcept){
	
		if(current.duration_type == "hourly"){
			if(util.hourlyDurationAlreadyExist(start,end, current.space)){
				gs.addErrorMessage("Schedule already taken");
				didExcept = true;
			}
			if(util.dateFieldIsNotWithinBusinessHours(start,end)){
				gs.addErrorMessage("Schedule must be witin business hours");
				didExcept = true;
			} 
		} 
		if(current.duration_type == "daily"){
			if(util.dailyDurationAlreadyExist(start,end, current.space)){
				gs.addErrorMessage("Schedule already taken");
				didExcept = true;
			}
		}

	
		
		if(spaceDays == true){
			gs.addErrorMessage("Schedule must be within Space's available days");
			didExcept = true;
		} 
		if(util.dateIsOnHoliday(start,end)){
			gs.addErrorMessage("Schedule must not be within holidays");
			didExcept = true;
		} 
		
	}
	
// 	gs.addErrorMessage(util.getSpaceSeatingCapacity(current.space));
// 			didExcept = true;
	if(current.attendee_count != ""){
		if(current.attendee_count > util.getSpaceSeatingCapacity(current.space) == true){
			gs.addErrorMessage("Attendees must be less than or equal to the Space's seating capacity");
			didExcept = true;
		}
	}
	
	
	if(didExcept == true){
		current.setAbortAction(true);
	} else{
		var startt = new GlideDateTime(start);
		var endd = new GlideDateTime(end);
		
		var duration = new GlideDuration();
		duration = GlideDateTime.subtract(startt,endd);
		var spaceTable = new GlideRecord("x_616811_coworking_csr_space");
		var obj = spaceTable.get(current.space);
		var spacePrice = spaceTable.priceperhour;
		
		if(current.duration_type == "hourly"){
			current.rent_amount = duration.getByFormat("HH")*spacePrice;
			gs.addInfoMessage("Rent price: "+ duration.getByFormat("HH")*spacePrice);
		} else if(current.duration_type == "daily"){
			if(startt.getDate() == endd.getDate()){
				current.rent_amount = spacePrice*util.getTotalWorkingHours();
			} else{
				var numberOfDays = 0;
				while(startt.getDate() <= endd.getDate()){
					if(spaceDays.includes(startt.getDayOfWeekUTC())){
						numberOfDays = numberOfDays + 1; 
					}
					startt.addDaysUTC(1);
				}
				current.rent_amount = numberOfDays*spacePrice*util.getTotalWorkingHours();
			}
			
			gs.addInfoMessage("Rent price: "+ current.rent_amount);
		}
	}
	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-21 08:46:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0331b8b2975a0110002ffef3a253af31</sys_id>
        <sys_mod_count>305</sys_mod_count>
        <sys_name>Reservation fields validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Coworking space Reservation System" source="x_616811_coworking">5c180b8b970a0110002ffef3a253afe3</sys_package>
        <sys_policy/>
        <sys_scope display_value="Coworking space Reservation System">5c180b8b970a0110002ffef3a253afe3</sys_scope>
        <sys_update_name>sys_script_0331b8b2975a0110002ffef3a253af31</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-04-25 01:39:15</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=0331b8b2975a0110002ffef3a253af31"/>
</record_update>
