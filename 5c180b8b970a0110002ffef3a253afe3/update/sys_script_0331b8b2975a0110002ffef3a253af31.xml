<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_616811_coworking_csr_reservations2</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Reservation fields validation</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var util = new ReservationUtils();
	var didExcept = false;
	var datetimeExcept = false;
	
	var start;
	var end;
	
	
	
	start = current.u_start_time;
	end = current.u_end_time;
	
	if(util.dateIsPastCurrentTime(start,end)){
		gs.addErrorMessage("Start and End must be ahead the current time");
		didExcept = true;
		datetimeExcept = true;
	}
	if(util.endIsBeforeStart(start,end)){
		gs.addErrorMessage("End must be ahead of Start");
		didExcept = true;
		datetimeExcept = true;
	}
	
	if(current.duration_type == "hourly" && util.intervalIsNotEqualToHour(start,end)){
		gs.addErrorMessage("Schedule must be exact an hour");
		didExcept = true;
		datetimeExcept = true;
	}
	
	if( current.duration_type == "hourly" && util.dateIsNotOnTheSameDay(start,end)){
		gs.addErrorMessage("Hourly reservations require Start and End datetime to be on the same day");
		didExcept = true;
		datetimeExcept = true;
	}
	
	
	var spaceDays = util.dateIsNotWithinSpaceDays(start,end, current.space);
	if(spaceDays.includes("true"))
		spaceDays = spaceDays.split(" ")[1];

	
	
	
	if(!datetimeExcept){
		var weeklyRange = "";
		var result = "";
		
// 		if(current.duration_type == "weekly")
// 			weeklyRange = util.weeklyReservation(current.every, start,end, spaceDays); 

		if(current.isNewRecord() && current.status == "awaiting_approval" && current.duration_type != "weekly" && 
			current.duration_type != "monthly"){
			result = util.scheduleAlreadyExist(start,end, current.space, current.duration_type, current.number, 
										current.isNewRecord());
			
		} else if(!current.isNewRecord() && (current.status == "approved" | current.status == 
												"awaiting_approval")
					&& current.duration_type != "weekly" && current.duration_type != "monthly"){
			result = util.scheduleAlreadyExist(start,end, current.space, current.duration_type, current.number, 
										current.isNewRecord());
		
		}
		if(result == true){
			gs.addErrorMessage("Schedule already taken");
			didExcept = true;
		}
		

		if(spaceDays.includes("true") && current.duration_type != "weekly" && current.duration_type != 
			"monthly"){
			gs.addErrorMessage("Schedule must be within Space's available days");
			didExcept = true;
		} 
		
		if(util.dateIsOnHoliday(start,end, current.duration_type) && current.duration_type != "weekly" && 
			current.duration_type != "monthly"){
				gs.addErrorMessage("Start or End is on Holiday");
				didExcept = true;
		}

	if(current.attendee_count != ""){
		if(current.attendee_count > util.getSpaceSeatingCapacity(current.space) == true){
			gs.addErrorMessage("Attendees must be less than or equal to the Space's seating capacity");
			didExcept = true;
		}
	}
	
		
		
	
	if(current.duration_type == "weekly" && !current.every.includes("all") && 
		util.everyFieldIncludesDaysNotIncludedInSpaceDays(current.every, spaceDays) == true){
		gs.addErrorMessage("Every field days must be within Space's days");
		didExcept = true;
		
	}
	
	
	}
	
	
	if(didExcept == true || datetimeExcept == true ){
		current.setAbortAction(true);
	} else{
			var every = "";
			if(current.duration_type== "weekly"){
				every = current.every;
			}
			else if(current.duration_type== "monthly"){
				every = current.every_monthly;
			}
		
			if(current.isNewRecord() && current.status == "awaiting_approval"){
				
				current.rent_amount =  util.calculateRent(current.duration_type, current.space, start, end, 
													spaceDays, util.getTotalWorkingHours(), every);
			
			} else if(!current.isNewRecord() && current.status == "awaiting_approval"){
				
				current.rent_amount =  util.calculateRent(current.duration_type, current.space, start, end, 
													spaceDays, util.getTotalWorkingHours(), every);
			}
				
		
	
			
			
			
		if(!current.isNewRecord() && previous.status == "awaiting_approval" && current.status == "approved"){

			if(current.duration_type == "weekly"  ){
		
				
				var spaceTable = new GlideRecord("x_616811_coworking_csr_space");
				var obj = spaceTable.get(current.space);
				var spacePrice = spaceTable.priceperhour;
				var startDate = "";
				var endDate = "";
				var endDateFilled = false;
				
				var daysRange = util.weeklyReservation(current.every, start,end, spaceDays, current.space); 
				var totalWorkingHours = util.getTotalWorkingHours();
				
// 				gs.addInfoMessage(daysRange);
// 				var regex = /,/g;
				var daysRangeArray = daysRange.split("|");
				
				for(var i = 0; i < daysRangeArray.length-1;i++){
// 					var regex = /,/g;
					var startEndWorkingHours = util.getStartEndWorkingHours();
					var startWorkingHours = startEndWorkingHours.split("|")[0].split(" ")[1];
					var endWorkingHours = startEndWorkingHours.split("|")[1].split(" ")[1];
					
					
// 					var everyModified = every.replace(regex, " ");
					startDate = new GlideDateTime(daysRangeArray[i].split(",")[0]+" " + startWorkingHours);
					endDate = new GlideDateTime(daysRangeArray[i].split(",")[1]+ " "+ endWorkingHours);
					
// 					gs.addInfoMessage();
// 					gs.addErrorMessage(startDate+" | "+ endDate);
// 					current.setAbortAction(true);
					var numberOfDays =  GlideDateTime.subtract(startDate, endDate).getDayPart() + 1; 
					var rentAmount = numberOfDays*spacePrice*totalWorkingHours;
					
// // 				
					var hours = new GlideTime();
					hours.setValue("07:00:00");
					startDate.add(hours);
					endDate.add(hours);
					
					var table2 = new GlideRecord("x_616811_coworking_csr_reservations2");
					table2.initialize();
					table2.setValue("duration_type", "weekly"); // give correct value based on field type
					table2.setValue("u_start_time",  startDate);
					table2.setValue("u_end_time",  endDate);
					table2.setValue("space", current.space);
					table2.setValue("applicant", current.applicant);
					table2.setValue("email", current.email);
					table2.setValue("rent_amount", rentAmount);
					table2.setValue("status", "approved");
					table2.setValue("attendee_count", current.attendee_count);
					table2.setValue("description", current.description);
					table2.setValue("every", current.every);
					table2.insert();
				}
				current.deleteRecord();
// 				
			} else if(current.duration_type == "monthly" ){
				var startDate2 = "";
				var endDate2 = "";
				
				var totalWorkingHours2 = util.getTotalWorkingHours();
				
				var spaceTable2 = new GlideRecord("x_616811_coworking_csr_space");
				spaceTable2.get(current.space);
				var spacePrice2 = spaceTable2.priceperhour;
 
				var daysRange2 = util.monthlyReservation(current.every_monthly, start,end, spaceDays, 
															current.space); 
				var daysRangeArray2 = daysRange2.split("|");
				
				for(var ii = 0; ii < daysRangeArray2.length-1;ii++){
					var startEndWorkingHours2 = util.getStartEndWorkingHours();
					var startWorkingHours2 = startEndWorkingHours2.split("|")[0].split(" ")[1];
					var endWorkingHours2 = startEndWorkingHours2.split("|")[1].split(" ")[1];
					gs.addInfoMessage("buness rule: "+ startDate2+" | "+ endDate2);
					
					startDate2 = new GlideDateTime(daysRangeArray2[ii].split(",")[0]+" " + startWorkingHours2);
					endDate2 = new GlideDateTime(daysRangeArray2[ii].split(",")[1]+ " "+ endWorkingHours2);
					
					
					
					
					var numberOfDays2 =  GlideDateTime.subtract(startDate2, endDate2).getDayPart() + 1; 
					var rentAmount2 = numberOfDays2*spacePrice2*totalWorkingHours2;
					
					var hours2 = new GlideTime();
					hours2.setValue("07:00:00");
					startDate2.add(hours2);
					endDate2.add(hours2);
					
// 					
					
					var table3 = new GlideRecord("x_616811_coworking_csr_reservations2");
					table3.initialize();
					table3.setValue("duration_type", "monthly"); // give correct value based on field type
					table3.setValue("u_start_time",  startDate2);
					table3.setValue("u_end_time",  endDate2);
					table3.setValue("space", current.space);
					table3.setValue("applicant", current.applicant);
					table3.setValue("email", current.email);
					table3.setValue("rent_amount", rentAmount2);
					table3.setValue("status", "approved");
					table3.setValue("attendee_count", current.attendee_count);
					table3.setValue("description", current.description);
					table3.setValue("every_monthly", current.every_monthly);
					table3.insert();
				}
				current.deleteRecord();
			}
		}
		
	}

	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-21 08:46:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0331b8b2975a0110002ffef3a253af31</sys_id>
        <sys_mod_count>641</sys_mod_count>
        <sys_name>Reservation fields validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Coworking space Reservation System" source="x_616811_coworking">5c180b8b970a0110002ffef3a253afe3</sys_package>
        <sys_policy/>
        <sys_scope display_value="Coworking space Reservation System">5c180b8b970a0110002ffef3a253afe3</sys_scope>
        <sys_update_name>sys_script_0331b8b2975a0110002ffef3a253af31</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-05-17 05:58:07</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=0331b8b2975a0110002ffef3a253af31"/>
</record_update>
